#import numpy as np!/usr/bin/env python3

# -*- coding: utf-8 -*-
"""
Created on Thu Nov  1 22:04:38 2018

@author: maxsterman
"""

from nltk.tokenize import RegexpTokenizer 
tokenizer = RegexpTokenizer(r'\w+')


def removeStopWords(artText, stopWordsList):
    num=0
    artTextList=tokenizer.tokenize(artText)
    for word in stopWordsList:
        while word in artTextList:
            artTextList.remove(word)
#        num=num+1
#        print(num)
#        artText=artText.replace(" "+word+" "," ");
#        artText=artText.replace(" "+word+"\\. ", "\\. ");
#        artText=artText.replace(" "+word+", ", ", ");
#        artText=artText.replace(" "+word+"! ", "! ");
#        artText=artText.replace("-"+word+"-", "");
#        artText=artText.replace("-"+word+" ", "-");
#        artText=artText.replace(" "+word+"-", "-");
#        artText=artText.replace("\""+word+" ", " ");
#        artText=artText.replace(" "+word+"\"", " ");
#        artText=artText.replace("\'"+word+" ", " ");
#        artText=artText.replace(" "+word+"\'", " ");
    artText=' '.join(artTextList)
    return artText



stopWords=["a",
			"about",
			"above",
			"after",
			"again",
			"against",
			"all",
			"also",
			"am",
			"an",
			"and",
			"any",
			"approx",
			"are",
			"aren't",
			"as",
			"at",
			"be",
			"because",
			"been",
			"before",
			"being",
			"below",
			"between",
			"both",
			"but",
			"by",
			"can",
			"can't",
			"cannot",
			"claim",
			"could",
			"couldn't",
              "d",
			"did",
			"didn't",
			"do",
			"does",
			"doesn't",
			"doing",
			"don't",
			"down",
			"during",
			"even",
			"each",
			"few",
			"for",
			"from",
			"further",
			"get",
			"give",
			"had",
			"hadn't",
			"has",
			"hasn't",
			"have",
			"haven't",
			"having",
			"he",
			"he'd",
			"he'll",
			"he's",
			"her",
			"here",
			"here's",
			"hers",
			"herself",
			"him",
			"himself",
			"his",
			"how",
			"how's",
			"however",
			"i",
			"i'd",
			"i'll",
			"i'm",
			"i've",
			"if",
			"in",
			"into",
			"is",
			"isn't",
			"it",
			"it's",
			"its",
			"itself",
			"let's",
              "ll",
			"make",
              "m",
			"me",
			"more",
			"most",
			"musn't",
			"must",
			"mustn't",
			"my",
			"myself",
			"new",
			"no",
			"nor",
			"not",
			"now",
              "nt",
			"of",
			"off",
			"on",
			"once",
			"only",
			"or",
			"other",
			"ought",
			"our",
			"ours",
			"ourselves",
			"out",
			"over",
			"own",
			"part",
			"pay",
			"pays",
			"paying",
			"paid",
			"question",
              "re",
              "s",
			"same",
			"say",
			"says",
			"saying",
			"said",
			"set",
			"shan't",
			"she",
			"she'd",
			"she'll",
			"she's",
			"should",
			"shouldn't",
			"since",
			"so",
			"some",
			"such",
              "t",
			"than",
			"take",
			"that",
			"that's",
			"the",
			"their",
			"theirs",
			"them",
			"themselves",
			"then",
			"there",
			"there's",
			"these",
			"they",
			"they'd",
			"they'll",
			"they're",
			"they've",
			"this",
			"those",
			"through",
			"time",
			"to",
			"too",
			"under",
			"until",
			"up",
			"use",
			"very",
              "ve",
			"was",
			"way",
			"wasn't",
			"we",
			"we'd",
			"we'll",
			"we're",
			"we've",
			"were",
			"weren't",
			"what",
			"what's",
			"when",
			"when's",
			"where",
			"where's",
			"which",
			"while",
			"who",
			"who's",
			"whom",
			"why",
			"why's",
			"will",
			"with",
			"won't",
			"would",
			"wouldn't",
			"you",
			"you'd",
			"you'll",
			"you're",
			"you've",
			"your",
			"yours",
			"yourself",
			"yourselves",
			"A",
			"About",
			"Above",
			"After",
			"Again",
			"Against",
			"All",
			"Also",
			"Am",
			"An",
			"And",
			"Any",
			"Approx",
			"Are",
			"Aren't",
			"As",
			"At",
			"Be",
			"Because",
			"Been",
			"Before",
			"Being",
			"Below",
			"Between",
			"Both",
			"But",
			"By",
			"Can",
			"Can't",
			"Cannot",
			"Claim",
			"Could",
			"Couldn't",
              "D",
			"Did",
			"Didn't",
			"Do",
			"Does",
			"Doesn't",
			"Doing",
			"Don't",
			"Down",
			"During",
			"Each",
			"Even",
			"Few",
			"For",
			"From",
			"Further",
			"Get",
			"Give",
			"Had",
			"Hadn't",
			"Has",
			"Hasn't",
			"Have",
			"Haven't",
			"Having",
			"He",
			"He'd",
			"He'll",
			"He's",
			"Her",
			"Here",
			"Here's",
			"Hers",
			"Herself",
			"Him",
			"Himself",
			"His",
			"How",
			"How's",
			"However",
			"I",
			"I'd",
			"I'll",
			"I'm",
			"I've",
			"If",
			"In",
			"Into",
			"Is",
			"Isn't",
			"It",
			"It's",
			"Its",
			"Itself",
			"Let's",
              "Ll",
			"Make",
			"Me",
			"More",
			"Most",
			"Musn't",
			"Must",
			"Mustn't",
			"My",
			"Myself",
			"New",
			"No",
			"Nor",
			"Not",
			"Now",
			"Of",
			"Off",
			"On",
			"Once",
			"Only",
			"Or",
			"Other",
			"Ought",
			"Our",
			"Ours",
			"Ourselves",
			"Out",
			"Over",
			"Own",
			"Part",
			"Pay",
			"Pays",
			"Paid",
			"Paying",
			"Question",
            "Re",  
            "S",
			"Same",
			"Say",
			"Says",
			"Saying",
			"Said",
			"Set",
			"Shan't",
			"She",
			"She'd",
			"She'll",
			"She's",
			"Should",
			"Shouldn't",
			"Since",
			"So",
			"Some",
			"Such",
              "T",
			"Take",
			"Than",
			"That",
			"That's",
			"The",
			"Their",
			"Theirs",
			"Them",
			"Themselves",
			"Then",
			"There",
			"There's",
			"These",
			"They",
			"They'd",
			"They'll",
			"They're",
			"They've",
			"This",
			"Those",
			"Through",
			"Time",
			"To",
			"Too",
			"Under",
			"Until",
			"Up",
			"Use",
              "Ve",
			"Very",
			"Was",
			"Wasn't",
			"Way",
			"We",
			"We'd",
			"We'll",
			"We're",
			"We've",
			"Were",
			"Weren't",
			"What",
			"What's",
			"When",
			"When's",
			"Where",
			"Where's",
			"Which",
			"While",
			"Who",
			"Who's",
			"Whom",
			"Why",
			"Why's",
			"Will",
			"With",
			"Won't",
			"Would",
			"Wouldn't",
			"You",
			"You'd",
			"You'll",
			"You're",
			"You've",
			"Your",
			"Yours",
			"Yourself",
			"Yourselves"]



stopWords+=[str(i) for i in range(101)]
stopWords+=[chr(ord('A')+i) for i in range(26)]
stopWords+=[chr(ord('a')+i) for i in range(26)]

import pandas as pd
import time

start_time=time.time()


newsMetaDataFrame=pd.read_csv("/Users/maxsterman/Downloads/PA Term Project_submit/Data/News_Headlines/All_Metadata.csv")
newsMetaDataFrame_StopWords=pd.read_csv("/Users/maxsterman/Downloads/PA Term Project_submit/Data/News_Headlines/All_Metadata_no_stop_words_updated.csv")
newsMetaDataFrame=newsMetaDataFrame.drop(['Unnamed: 0'],axis=1)
#newNewsFrame=pd.DataFrame(columns=newsMetaDataFrame.columns.values)

for i in range(newsMetaDataFrame.shape[0]):
    if (i%1000) == 0:
        print(i)
        curr_time=time.time()
        print("Time passed: %f" % (curr_time-start_time))
    
    
    if i < newsMetaDataFrame_StopWords.shape[0]:
        newsMetaDataFrame['Title'][i]=newsMetaDataFrame_StopWords['Title'][i]
        continue
    
    
    articleTitle=newsMetaDataFrame['Title'][i]
    articleTitle=removeStopWords(articleTitle,stopWords)
    newsMetaDataFrame['Title'][i]=articleTitle
    
    
#    newRow=newsMetaDataFrame.loc[i,:].copy()
#    articleTitle=newRow['Title']
#    articleTitle=removeStopWords(articleTitle,stopWords)
#    newRow['Title']=articleTitle
#    newNewsFrame=newNewsFrame.append(newRow)
    
newsMetaDataFrame.to_csv("/Users/maxsterman/Downloads/PA Term Project_submit/Data/News_Headlines/All_Metadata_no_stop_words_updated.csv")
